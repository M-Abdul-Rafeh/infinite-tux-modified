/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mojang.mario.mapedit;

import com.mojang.mario.MarioComponent;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

import javax.swing.*;


import com.mojang.mario.level.*;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author pedro
 */
public class NewLevelEditor extends JFrame {

    /**
     * Creates new form NewLevelEditor
     */
    private JCheckBox[] bitmapCheckboxes = new JCheckBox[8];
    //private  NewTilePicker tilePicker;
    //private  NewLevelEditView levelEditView;
   // private JLabel coordinates;
    private String coordinateText="X=P , Y=Q";
    
    public NewLevelEditor() {
        super("Map Edit");
        initComponents();
        bitmapCheckboxes[0] = this.blockUpperjCheckBox ;
        bitmapCheckboxes[1] = this.blockAlljCheckBox;
        bitmapCheckboxes[2] = this.blockLowerjCheckBox;
        bitmapCheckboxes[3] = this.jspecialjCheckBox;
        bitmapCheckboxes[4] = this.bumpablejCheckBox;
        bitmapCheckboxes[5] = this.breakablejCheckBox;
        bitmapCheckboxes[6] = this.pickupablejCheckBox;
        bitmapCheckboxes[7] = this.animatedjCheckBox;
        
        
        try
        {
            Level.loadBehaviors(new DataInputStream(new FileInputStream("tiles.dat")));
        }
        catch (Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
        }
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setPreferredSize(screenSize);
        setSize(screenSize.width * 8 / 10, screenSize.height * 8 / 10);
        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

//        tilePicker = new NewTilePicker();
//        tilePickerPanel.add(tilePicker);
        //tilePickerPanel.add(buildBitmapPanel());

    
        //tilePickerPanel.setBorder(new TitledBorder(new EtchedBorder(), "Tile picker"));

//        levelEditView = new NewLevelEditView(tilePicker);
//        levelEditViewjScrollPane.add(levelEditView);
        //buildBitmapPanel();
        tilePicker.addTilePickChangedListener(this);
        setContentPane(borderPanel);
        
    
    }
    
   

    
    public void setPickedTile(byte pickedTile)
    {
        int bm = Level.TILE_BEHAVIORS[pickedTile&0xff]&0xff;
        
        for (int i=0; i<8; i++)
        {
            bitmapCheckboxes[i].setSelected((bm&(1<<i))>0);
        }
    }
    

    public void setCoordinates(int x , int y)
    {
        coordinateText="X=" + x +" , " +"Y="+y;
        coordinatesjLabel.setText(coordinateText);
    

        //coordinates.repaint();
    
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borderPanel = new javax.swing.JPanel();
        lowerPanel = new javax.swing.JPanel();
        tilePickerPanel = new javax.swing.JPanel();
        bitmapCheckBoxPanel = new javax.swing.JPanel();
        blockUpperjCheckBox = new javax.swing.JCheckBox();
        blockAlljCheckBox = new javax.swing.JCheckBox();
        blockLowerjCheckBox = new javax.swing.JCheckBox();
        jspecialjCheckBox = new javax.swing.JCheckBox();
        bumpablejCheckBox = new javax.swing.JCheckBox();
        breakablejCheckBox = new javax.swing.JCheckBox();
        pickupablejCheckBox = new javax.swing.JCheckBox();
        animatedjCheckBox = new javax.swing.JCheckBox();
        tilePicker = new com.mojang.mario.mapedit.NewTilePicker();
        coordinatesjLabel = new javax.swing.JLabel();
        levelEditViewjScrollPane = new javax.swing.JScrollPane();
        levelEditView = new com.mojang.mario.mapedit.NewLevelEditView(tilePicker);
        jMenuBar1 = new javax.swing.JMenuBar();
        levelEditorjMenu = new javax.swing.JMenu();
        openFilejMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        borderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lowerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tilePickerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile Picker"));

        bitmapCheckBoxPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        blockUpperjCheckBox.setText("Block Upper");
        blockUpperjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockUpperjCheckBoxActionPerformed(evt);
            }
        });

        blockAlljCheckBox.setText("Block All");
        blockAlljCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockAlljCheckBoxActionPerformed(evt);
            }
        });

        blockLowerjCheckBox.setText("Block Lower");
        blockLowerjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockLowerjCheckBoxActionPerformed(evt);
            }
        });

        jspecialjCheckBox.setText("Special");
        jspecialjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jspecialjCheckBoxActionPerformed(evt);
            }
        });

        bumpablejCheckBox.setText("Bumpable");
        bumpablejCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bumpablejCheckBoxActionPerformed(evt);
            }
        });

        breakablejCheckBox.setText("Breakable");
        breakablejCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakablejCheckBoxActionPerformed(evt);
            }
        });

        pickupablejCheckBox.setText("Pickupable");
        pickupablejCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupablejCheckBoxActionPerformed(evt);
            }
        });

        animatedjCheckBox.setText("Animated");
        animatedjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animatedjCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bitmapCheckBoxPanelLayout = new javax.swing.GroupLayout(bitmapCheckBoxPanel);
        bitmapCheckBoxPanel.setLayout(bitmapCheckBoxPanelLayout);
        bitmapCheckBoxPanelLayout.setHorizontalGroup(
            bitmapCheckBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bitmapCheckBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bitmapCheckBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blockUpperjCheckBox)
                    .addComponent(blockAlljCheckBox)
                    .addComponent(blockLowerjCheckBox)
                    .addComponent(jspecialjCheckBox)
                    .addComponent(bumpablejCheckBox)
                    .addComponent(breakablejCheckBox)
                    .addComponent(pickupablejCheckBox)
                    .addComponent(animatedjCheckBox))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        bitmapCheckBoxPanelLayout.setVerticalGroup(
            bitmapCheckBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bitmapCheckBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blockUpperjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockAlljCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockLowerjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspecialjCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bumpablejCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(breakablejCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickupablejCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(animatedjCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tilePickerLayout = new javax.swing.GroupLayout(tilePicker);
        tilePicker.setLayout(tilePickerLayout);
        tilePickerLayout.setHorizontalGroup(
            tilePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        tilePickerLayout.setVerticalGroup(
            tilePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tilePickerPanelLayout = new javax.swing.GroupLayout(tilePickerPanel);
        tilePickerPanel.setLayout(tilePickerPanelLayout);
        tilePickerPanelLayout.setHorizontalGroup(
            tilePickerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tilePickerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tilePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(bitmapCheckBoxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tilePickerPanelLayout.setVerticalGroup(
            tilePickerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tilePickerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tilePickerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tilePickerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tilePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bitmapCheckBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        coordinatesjLabel.setText("Coordinates");

        javax.swing.GroupLayout lowerPanelLayout = new javax.swing.GroupLayout(lowerPanel);
        lowerPanel.setLayout(lowerPanelLayout);
        lowerPanelLayout.setHorizontalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tilePickerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(coordinatesjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        lowerPanelLayout.setVerticalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coordinatesjLabel)
                    .addComponent(tilePickerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout levelEditViewLayout = new javax.swing.GroupLayout(levelEditView);
        levelEditView.setLayout(levelEditViewLayout);
        levelEditViewLayout.setHorizontalGroup(
            levelEditViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
        );
        levelEditViewLayout.setVerticalGroup(
            levelEditViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
        );

        levelEditViewjScrollPane.setViewportView(levelEditView);

        javax.swing.GroupLayout borderPanelLayout = new javax.swing.GroupLayout(borderPanel);
        borderPanel.setLayout(borderPanelLayout);
        borderPanelLayout.setHorizontalGroup(
            borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelEditViewjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                    .addComponent(lowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        borderPanelLayout.setVerticalGroup(
            borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borderPanelLayout.createSequentialGroup()
                .addComponent(levelEditViewjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        levelEditorjMenu.setText("File");

        openFilejMenuItem.setText("Load");
        openFilejMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilejMenuItemActionPerformed(evt);
            }
        });
        levelEditorjMenu.add(openFilejMenuItem);

        jMenuBar1.add(levelEditorjMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(borderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(borderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blockUpperjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockUpperjCheckBoxActionPerformed
        // TODO add your handling code here:o Way
        //System.out.println("No Way");
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<0);
                    if (bitmapCheckboxes[0].isSelected()) bm|=(1<<0);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }        
    }//GEN-LAST:event_blockUpperjCheckBoxActionPerformed

    private void openFilejMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilejMenuItemActionPerformed
      final JFileChooser fileChooser = new JFileChooser();
      File choice;
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      FileNameExtensionFilter levelFilter = new FileNameExtensionFilter("lvl files (*.lvl)", "lvl");
      fileChooser.setFileFilter(levelFilter);
      
     int returnVal = fileChooser.showOpenDialog(null);  
     String fileExtension;  
     //if the user confirms file selection display a message  
     if (returnVal == JFileChooser.APPROVE_OPTION) { 
         
            if (fileChooser.getSelectedFile() != null) {
                choice = fileChooser.getSelectedFile();
                try {
                    levelEditView.setLevel(Level.load(new DataInputStream(new FileInputStream(choice))));
                } catch (IOException ex) {
                    Logger.getLogger(NewLevelEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }        
     }  
     
    }//GEN-LAST:event_openFilejMenuItemActionPerformed

    private void blockAlljCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockAlljCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<1);
                    if (bitmapCheckboxes[1].isSelected()) bm|=(1<<1);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_blockAlljCheckBoxActionPerformed

    private void blockLowerjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockLowerjCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<2);
                    if (bitmapCheckboxes[2].isSelected()) bm|=(1<<2);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_blockLowerjCheckBoxActionPerformed

    private void jspecialjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jspecialjCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<3);
                    if (bitmapCheckboxes[3].isSelected()) bm|=(1<<3);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_jspecialjCheckBoxActionPerformed

    private void bumpablejCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bumpablejCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<4);
                    if (bitmapCheckboxes[4].isSelected()) bm|=(1<<4);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_bumpablejCheckBoxActionPerformed

    private void breakablejCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakablejCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<5);
                    if (bitmapCheckboxes[5].isSelected()) bm|=(1<<5);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_breakablejCheckBoxActionPerformed

    private void pickupablejCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupablejCheckBoxActionPerformed
                     int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<6);
                    if (bitmapCheckboxes[6].isSelected()) bm|=(1<<6);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_pickupablejCheckBoxActionPerformed

    private void animatedjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animatedjCheckBoxActionPerformed
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<7);
                    if (bitmapCheckboxes[7].isSelected()) bm|=(1<<7);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
    }//GEN-LAST:event_animatedjCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        new NewLevelEditor().setVisible(true);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewLevelEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewLevelEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewLevelEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewLevelEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewLevelEditor().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox animatedjCheckBox;
    private javax.swing.JPanel bitmapCheckBoxPanel;
    private javax.swing.JCheckBox blockAlljCheckBox;
    private javax.swing.JCheckBox blockLowerjCheckBox;
    private javax.swing.JCheckBox blockUpperjCheckBox;
    private javax.swing.JPanel borderPanel;
    private javax.swing.JCheckBox breakablejCheckBox;
    private javax.swing.JCheckBox bumpablejCheckBox;
    private javax.swing.JLabel coordinatesjLabel;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JCheckBox jspecialjCheckBox;
    private com.mojang.mario.mapedit.NewLevelEditView levelEditView;
    private javax.swing.JScrollPane levelEditViewjScrollPane;
    private javax.swing.JMenu levelEditorjMenu;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JMenuItem openFilejMenuItem;
    private javax.swing.JCheckBox pickupablejCheckBox;
    private com.mojang.mario.mapedit.NewTilePicker tilePicker;
    private javax.swing.JPanel tilePickerPanel;
    // End of variables declaration//GEN-END:variables

 

    public JPanel buildBitmapPanel()
    {
        JPanel panel = new JPanel(new GridLayout(0, 1));
        for (int i=0; i<8; i++)
        {
            bitmapCheckboxes[i] = new JCheckBox(Level.BIT_DESCRIPTIONS[i]);
            panel.add(bitmapCheckboxes[i]);
            if (Level.BIT_DESCRIPTIONS[i].startsWith("- ")) bitmapCheckboxes[i].setEnabled(false);
            
            final int id = i;
            bitmapCheckboxes[i].addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent arg0)
                {
                    int bm = Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff]&0xff;
                    bm&=255-(1<<id);
                    if (bitmapCheckboxes[id].isSelected()) bm|=(1<<id);
                    Level.TILE_BEHAVIORS[tilePicker.pickedTile&0xff] = (byte)bm;

                    try
                    {
                        Level.saveBehaviors(new DataOutputStream(new FileOutputStream("tiles.dat")));
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                        //JOptionPane.showMessageDialog(LevelEditor.this, e.toString(), "Failed to load tile behaviors", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
        return panel;
    }
}
